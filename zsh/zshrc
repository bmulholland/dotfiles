# APPEND_HISTORY If this is set, zsh sessions will append their history list to
# the history file, rather than replace it. Thus, multiple parallel zsh sessions
# will all have the new entries from their history lists added to the history
# file, in the order that they exit. The file will still be periodically
# re-written to trim it when the number of lines grows 20% beyond the value
# specified by $SAVEHIST (see also the HIST SAVE BY COPY option).
setopt APPEND_HISTORY

# Autocorrect was breaking too much stuff
# Maybe this is better these days?
# unsetopt correct_all

# Needs to be first, so these are available for OMZ plugins
export PATH=$PATH:~/.local/bin

alias asdf="mise" # switched from asdf to mise
alias arst="mise" # support colemak layout

alias be="bundle exec"
alias bi="bundle install"
alias bu="bundle update"

alias gs="git status"
alias gch="git checkout"

# System VIM sucks and doesn't even have Python; use the one from MacVim
# Going to try using neovim
# alias vim="/Applications/MacVim.app/Contents/MacOS/Vim"
alias vim=nvim

upgradeall() {
  brew update && \
  brew upgrade && \
  brew upgrade --cask --greedy && \
  brew cleanup && \
  "$ZSH/tools/upgrade.sh" && \
  mise self-update && \
  mise up --bump && \
  echo 'DONE UPGRADE' && \
  omz reload
}
alias ua="upgradeall"

# https://gist.github.com/hlissner/db74d23fc00bed81ff62
function ag-replace() {
  ag -0 -l $1 | xargs -0 sed -ri.bak -e "s/$1/$2/g"
}

# Search for all files with contents using silver searcher,
# then open them in MacVim
function mvag() {
  vimr -n `ag -l $@` --cur-env
}

# Search for all files with contents using silver searcher,
# then open them in Vim
function vag() {
  nvim -n `ag -l $@`
}

# Open all modified files in git
function mvgit() {
  nvimr -n $(git status -s | awk '{print $2}')
}

# Shortcuts to jump forward/back a word with Alt+Arrow
bindkey '[C' forward-word
bindkey '[D' backward-word

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# Secret environment variables - passwords etc.
if [ -f ~/.zshrcsecrets ]; then
  source ~/.zshrcsecrets
fi

# Uncomment following line if you want red dots to be displayed while waiting for completion
COMPLETION_WAITING_DOTS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# TODO: Go through these plugins and add commands to Anki so I memorize them
# Syntax highlighting from https://github.com/zdharma/fast-syntax-highlighting
plugins=(macos rails rake rake-fast ruby git git-auto-fetch git-escape-magic aws colorize command-not-found common-aliases httpie yarn pnpm mise terraform tmux zsh-autosuggestions you-should-use fast-syntax-highlighting z bundler)

# heroku autocomplete setup
HEROKU_AC_ZSH_SETUP_PATH=/Users/bmulholland/Library/Caches/heroku/autocomplete/zsh_setup && test -f $HEROKU_AC_ZSH_SETUP_PATH && source $HEROKU_AC_ZSH_SETUP_PATH;

# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="wezm"

source $ZSH/oh-my-zsh.sh

autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /usr/local/bin/terraform terraform

# Switch delta (diff viewer) between dark and light mode. Requires matching
# config in gitconfig:
# https://github.com/dandavison/delta/issues/447
__delta_dark_mode_preexec_function () {
    export DELTA_FEATURES="$(dark-notify -e)-mode"
}
typeset -ag preexec_functions;
preexec_functions=( __delta_dark_mode_preexec_function ${preexec_functions[@]} )
